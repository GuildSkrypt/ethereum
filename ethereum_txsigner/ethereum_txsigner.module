<?php

/**
 * @file
 * Contains ethereum_txsigner.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\ethereum_txsigner\Entity as TxSignerEntity;

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *
 * @return string
 */
function ethereum_txsigner_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ethereum_txsigner module.
    case 'help.page.ethereum_txsigner':
      return ethereum_get_readme_html('ethereum_txsigner');
    default:
  }
}

// WHY USE ES2015
// https://philipwalton.com/articles/deploying-es2015-code-in-production-today/

/**
 * Implements hook_library_info_build().
 *
 * Loading txsigner "dynamically" (they are still cached) based on configuration.
 *
 * @return array
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function ethereum_txsigner_library_info_build() {
  $libraries = array();

  $libraries['txsigners'] = [
    'version' => '1.x',
    'dependencies' => [
      0 => 'core/drupalSettings'
    ],
    'type' => 'file',
    'js' => [],
    'css' => []
  ];

  $txSigners =  \Drupal::entityTypeManager()->getStorage('txsigner')->loadMultiple();
  foreach ($txSigners as $txsigner) {
    // Js files loaded by libraries must be relative to module root.
    // @todo allow TX signer implementation in independent module.
    // Better would be to allow TX signers be defined only using config,
    // but for now we are fixed to ethereum_txsigner/js/<PATH.js>
    if ($txsigner->jsFilePath()) {
      $libraries['txsigners']['js']['js/' . $txsigner->jsFilePath()] = [];
    }
    if ($txsigner->cssFilePath()) {
      $libraries['txsigners']['css']['theme']['js/' . $txsigner->cssFilePath()] = [];
    }
  }
  return $libraries;
}
